" 20170915   this is iMac:/Users/rk/.givmrc     CHANGE ME    (all other gvimrc abandoned)
"
" -----------------------------------------------------------------------------------------------------------
" 20190519 added  identifier, statement, keyword
" 20171025 added this:
"   THE JAVASCRIPT SECTION WILL ALWAYS BY HIGHLIGHTED PROPERLY, REGARDLESS OF HOW LONG THE js SECTION IS.
"  (see SSSSS... below)
" -----------------------------------------------------------------------------------------------------------
"
" HEY  FYI   syntax files are in   /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax
"
" HEY  FYI   re:     hi Comment guifg=#AAFF99     at bottom of this file (it works!)
" HEY  FYI   re:     hi Comment guibg=#111111 guifg=#AAFF99    
"
"            you can try the strings like "Comment" above to change colors of other categories
"            file with ALL categories  (/Users/rk/_PC/usr/Apple/_C/_wrk/free/macVimSynHIcategories.txt)
"            is COPIED (228 lines) in comments at the bottom of this file
"
" WORKING VERSION is in $HOME/.gvimrc    ( /Users/rk/.gvimrc ) (see also ll *gvim* )

" copy is in like- gvimrc_SAVE_20171025_HTMLandJS  in  $ iMac:/Users/rk/_PC/usr/apple/_c/_wrk/free  

" copy            is in c:/usr/rk/_gvimrc   (see also ll *gvim* )
" copy            is in c:/usr/rk/_gvimrc   (this dir is "/Users/rk/_PC/usr/pcrk/_gvimrc" in services>FilePathToClip)
"
" see  "/Users/rk/_PC/wk_old/rk/Vim/Vim70/vimUsrManual.pdf"
" see  "/Users/rk/_PC/usr/pcrk/_Vim/Vim70/vimbook-OPL.pdf"
" search for "startup"
"
"
"Without the following lines in your .vimrc, _vimrc, or other startup file, the
"files in the vim-ruby project will be largely useless. >



"SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
"This is a really old post, but I was experiencing the same thing: sometimes syntax highlight would just stop working when looking at the javascript section in an .html file. As the OP mentions, a quick workaround was to scroll up and then magically things would start highlighting again.
"
"Today I found the underlying problem and a good solution. In Vim, syntax highlighting uses a context to derive the correct highlight, where context is defined by the previous lines. It is possible to specify how many lines before the current line are used by issuing :syntax sync minlines=200. In this case, it will use up to 200 previous lines as context. It is possible to use the whole file (which can be slow for long files) by running :syntax sync fromstart.
"
"Once I found that, I added this line to my .vimrc:
"
"   autocmd BufEnter *.html :syntax sync fromstart
"By doing so, .html files will use the whole file as context.
" Thus, THE JAVASCRIPT SECTION WILL ALWAYS BY HIGHLIGHTED PROPERLY, REGARDLESS OF HOW LONG THE js SECTION IS.
" Hope this helps someone else out there!
"
"answered Dec 1 '16 at 17:52
"
"jorgeh
"

"autocmd BufRead,BufNewFile  *.htm,*.HTM,*.html,*.HTML  set filetype=javascript
"autocmd BufRead,BufNewFile  *.htm,*.HTM,*.html,*.HTML  set filetype=html
"autocmd BufEnter *.html :syntax sync fromstart
"autocmd BufEnter *.html :syntax sync minlines=200
"autocmd BufEnter *.html :syntax sync minlines=10000

"autocmd BufRead,BufNewFile  *.htm,*.HTM,*.html,*.HTML  set filetype=html
autocmd BufEnter *.html :syntax sync fromstart
"SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

set nocompatible      " We're running Vim, not Vi!
"set compatible    

" 201309 show lineno, columnno at bottom right
set ruler

set number  " 20130910 

" want to atomatically save all dos/windows crlf files as unix lf files
set fileformat=unix
"<.>
"origline=  autocmd Bufwritepre,filewritepre Y:/* set ff=unix 
if !exists("autocmds_loaded") 
   let autocommands_loaded = 1 
   autocmd Bufwritepre,filewritepre * set ff=unix 
endif 

syntax enable             " Enable syntax highlighting
autocmd Bufwritepre,filewritepre * set ff=unix 



"syntax on             " Enable syntax highlighting
"filetype off           " Enable filetype detection
"filetype indent off    " Enable filetype-specific indenting
"filetype indent on    " Enable filetype-specific indenting
"filetype plugin off    " Enable filetype-specific plugins
"
set guioptions-=r  " turn off right scrollbar
"
"
"set formatoptions=c,q,r,t " This is a sequence of letters which describes how
" automatic formatting is to be done.
"
" letter    meaning when present in 'formatoptions'
" ------    ---------------------------------------
" c         Auto-wrap comments using textwidth, inserting
"           the current comment leader automatically.
" q         Allow formatting of comments with "gq".
" r         Automatically insert the current comment leader
"           after hitting <Enter> in Insert mode. 
" t         Auto-wrap text using textwidth (does not apply
"           to comments)
"
"
"
"set UTF-8 encoding
" :set enc=utf-8
" :set fenc=utf-8
" :set termencoding=utf-
"
"
"set autoindent
"set smartindent
":set cindent
":set comments=sfl0:/*,ml:*,e:*/
":set comments=s:/*,m-4:*,e:*/
":set formatoptions+=or
":set comments=sl:/*,m:*,elx:*/
"
"  /*
"  * This is the comment
"  */
":set comments=sl:/*,mb:*,elx:*/   " supposed to work
"
":set comments=s:/*,m:*,e:*/
set formatoptions=r " This is a sequence of letters which describes how
"
" /// -> insert javadoc comment
"iab <buffer> /// /**^M *^M*/^[0A

"
" get following style C comments
"          /*
"          * This is the comment
"          */
":set comments=sl:/*,mb:*,elx:*/
set comments=s:/*,m:*,e:*/
"
" INDENTING  in C   autoindent smartindent, cindent   each overrides prev ones
"
"
:set guioptions-=m  "remove menu bar
:set guioptions-=T  "remove toolbar
:set guioptions-=r  "remove right-hand scroll bar, also l,b
"The following mappings provide toggles to show or hide a widget. 
" m menu bar,  T toolbar, r right scrollbar
" for macvim need "<F1>" and, in macvim, do press fn-F1 
nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
nnoremap <C-F2> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
nnoremap <C-F3> :if &go=~#'r'<Bar>set go-=r<Bar>else<Bar>set go+=r<Bar>endif<CR>
"
"
"compiler ruby         " Enable compiler support for ruby
 
" " To enable the saving and restoring of screen positions.
"let g:screen_size_restore_pos = 1
" " To save and restore screen for each Vim instance.
" " This is useful if you routinely run more than one Vim instance.
" " For all Vim to use the same settings, change this to 0.
"let g:screen_size_by_vim_instance = 1

"source C:\Program Files\Vim\vim70\macros\matchit.vim  " get matchit functionality
" HEY  FYI   syntax files are in   /Applications/MacVim.app/Contents/Resources/vim/runtime/syntax
"source /Applications/MacVim.app/Contents/Resources/vim/runtime/macros/matchit.vim

"<.>
" To enable the saving and restoring of screen positions.
let g:screen_size_restore_pos = 1

" To save and restore screen for each Vim instance.
" This is useful if you routinely run more than one Vim instance.
" For all Vim to use the same settings, change this to 0.
let g:screen_size_by_vim_instance = 1

if has("gui_running")
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vimsize'
    endif
  endfunction

  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
endif
"<.>




"
"source $VIMRUNTIME/vimrc_example.vim  "BEWARE this screwed C comment formatting
"
"
behave xterm
" gui font
"set gfn=Lucida_Console:h8:b:cANSI
"set gfn=Andale_Mono:h8:b:cANSI
"set gfn=Andale_Mono:h12::cANSI   " good but big
"set gfn=Andale_Mono:h10:b:cANSI
"set gfn=Consolas:h10::cANSI 
"set gfn=Andale_Mono:h10::cANSI
"set gfn=Modern:h10::cANSI  " good  little too bold
"set gfn=Andale_Mono:h11::cANSI
"set gfn=Deja_Vu_Sans_Mono:h11::cANSI
"set guifont=Deja_Vu_Sans_Mono:h12::cANSI  "ok but inconsolata better
"set guifont=Deja_Vu_Sans_Mono:h13::cANSI  "this is really wide
"set guifont=Inconsolata:h13::cANSI  " too big
"set guifont=Inconsolata:h12::cANSI  " ideal apr2013
"set gfn=Andale_Mono:h12::cANSI   " good but big
"set gfn=Menlo:h14::cANSI
"set guifont=Inconsolata:h14::cANSI  " too big


"<!-- #htm
"#htm X   lll111 oooOOO000 iiMMMM WWWWW
"#htm X   lll111 oooOOO000 iiMMMM WWWWW
"""""""""""""""""""""""""""""""""""""""
"                      01234567890
"#htm X   lll111 oooOOO000 iiMMMM WWWWW
"#htm X   lll111 oooOOO000 iiMMMM WWWWW
"#htm X   lll111 oooOOO000 iiMMMM WWWWW
"                     OO  01234567890 lllll11111IIIII MMMMMMM
"                     88888ggggg99999 jjjjjyyyyy mmmmmm nnnnn
"                     66666bbbbb 55555SSSSS
"#htm X   lll111 oooOOO000 iiMMMMWWWWW
"#htm -->


"  NEW FORMAT  for FONT SETTING
"set guifont=Menlo\ Regular:h15  " NOTE  <==================-------  NEW FORMAT  for FONT SETTING
"set guifont=Andale_Mono:h12::cANSI  " NOTE  <==================-------  NEW FORMAT  for FONT SETTING
"set guifont=Menlo\ Regular:h13  

"set guifont=Andale_Mono:h11;  
"set guifont=Andale_Mono:h13;    " ::;;  good but big

"set guifont=Menlo:h11
set guifont=Menlo:h13

"set guifont=*
" USE DEFAULT when all these are commented out

:colorscheme desert

" off is nohlsearch
:set hlsearch

set selectmode=mouse
"
"set mouse=a
"To use the standard MS-Windows way of CTRL-X, CTRL-C and CTRL-V, use the
"$VIMRUNTIME/mswin.vim script.  You could add this line to your _vimrc file: >
" 20120218  try mouse
"   NOTE for mswin.vim   CTRL-Q does what CTRL-V used to do
source $VIMRUNTIME/mswin.vim
"
"
"set smarttab
" Idem, but add ascii value of char under the cursor (like "ga")
set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P

"
" For indentation without tabs, the principle is to set 'expandtab', 
" and set 'shiftwidth' and 'softtabstop' to the same value, 
" while leaving 'tabstop' at its default value:
set expandtab   " on input, insert spaces when tab is inserted
"set shiftwidth=2
set softtabstop=2   " this can put in a tab if indent > 8
"set tabstop=8   " also ts
"set tabstop=4   " also ts
set tabstop=2   " also ts
"

" environment
"
" set number of lines in window
"set lines=50
"set lines=80
set lines=70
" set number of columns in window
"set co=132
"set co=90
"set co=110   changed to 150 on 20150414
"set co=150
"set columns=150
set columns=120
" set backup file dir not to current directory
"   backupdir	list of directories to put backup files in
"set bdir=c:\\software\\vim\\autoVimFiles,c:\\temp
"
"
" set swap file dir not to current directory
"   directory	list of directories for the swap file
"   set dir=.,c:\\tmp,c:\\temp
"set dir=c:\\software\\vim\\autoVimFiles,c:\\temp
"
"set dir=$VIMRUNTIME\\work
" conflicted on "tfr" and seldom used, so
" for mac iterm
set directory=$TMPDIR 
"set noswapfile        " no?  yes?
"
"
" show currentbuffers, allow switch
"map  :buffers:buffer              "  out see below
"
" WANT to edit the filename under the cursor with macvim, so
" that when finished and ";q!", then you are back in orig file
"map  
"map  :e <cfile>
" this does like "gf" command 
map  :!mvim <cfile>
"


" to get this to work in viw.exe, you have to remove the comment lines
" after copying this file, exviw.rc to ex.rc.
set noremap
set report=0
" WANT  in gvim, use shell  in vi r!date r!pr -t -n    etc...
"set shell=/mksnt/sh
"set shell=/bin/sh
"set shell="cmd.exe /C "c:\rk\runksh.bat""
"set shell="c:\cygwin\bin\bash.exe"
" 
" the following WORKED!
"    in my computer > properties > advanced > environment variables 
"      add SHELL  and set to   c:\cygwin\bin\bash.exe
"      
set ignorecase
"set cursor=0x000a
"set cursor=90
"set cursorins=0x0405
"set cursorins=20

" Q joins lines 
"hp map Q J
"the left arrow, right arrow below is magic rubbish
"map Q J_
" map Q :j
"map Q 0il
"map Q :j
"map Q J
"map Q $aqxzq:j/qxzqxxxx
" http://stackoverflow.com/questions/9505198/join-two-lines-in-vim-without-moving-cursor
"  Another approach that wouldn't stomp on marks would be this:
:nnoremap <silent> J :let p=getpos('.')<bar>join<bar>call setpos('.', p)<cr>

"make colon unshifted 

map ; :
" go to end of line and into insert mode 
map ] A
" go into insert mode 
"map , i
"the _, backspace below is magic rubbish
map , i_
" make inverted T arrow keys on j,k,l,i 
map i 
map j 
map k 
"map L lllllllll
" make shifted arrow keys go farther 
"hp map I 
"hp map J 
"hp map K 
map I 7
map J 9
map K 7
map L 9l
" make o and . do PageUp and PageDn 
map o 
map . 
" make q and e goto top and end of document 
map q 01G
"map e :$10:$
map e G
" scroll up/down 7 lines 
"map  
"map  
"map  7
map  7
map 	 7
" g does dot 
"hp map g .
"the left arrow, right arrow below is magic rubbish
map g .l
" ctrl-K does escape in insert mode 
"map!  
" t opens up the line below and goes into insert mode 
"hp map t o
"the _, backspace below is magic rubbish
map t o_
" h and H create blank lines below and above the current line 
map h o
map H O
" v inserts a single character in command mode, stays in cmd mode 
map v iXr
" z inserts a single character at eol in command mode, stays in cmd mode 
map z Axr
" u and m do PgUp and PgDn 
map u 0
map m $
" f puts a marker named d 
"map f :kd
" below is for hpux
map f md
" b types a line range from 'd to . on command line 
map b :'d,.
" read, write and append the line range to file "tfr" 
map  :r tfr
map  :'d,.w!tfr
map  :'d,.w>>tfr
" read/write/append to /c:/tmp/tfr 
" read/write/append to /tmp 
map X :r /tmp/tfr
map C :'d,.w!/tmp/tfr
map V :'d,.w>>/tmp/tfr
" = prints all lines in buffer containing the last search pattern 
"map = :g//p
map = :g//p
" top comment.2/3-line comment delimiters for the line above current line 

" = prints all lines in buffer containing the last search pattern 
map = :g//p
" top comment.2/3-line comment delimiters for the line above current line 
"hp map  O###PA 
"map  O/* O*/A
"map  O// O//A 
"map  O#O# O#A
"map  O# O#A
"map  O#O# 
"
" C top comment. 3-line comment delimiters for the line above current line
"map  O/* */A 
" Note: below has a space at the end of the line
"map  OOi */i/* 
map  yypc$*/yypc$/* 
"
"
" comment out the current line
"hp map  0,# 
"map  0i/* A */0
"map  0,# 0
"map  0i// 0
"map  0i# 0
"
" C comment out the current line
"map  0,/* A */
"map  0i/* A */
"
" put a comment at the end of the current line 
"map!  /*  */i
"map!  # a
"map!  A // 
"
" comment out the current line by surrounding it
"map  0i/* A */0
map  0i//0



"
" UNcomment out the current line by removing surrounding /* */
"  using mac key   command-X or option-x
" does not work  <D-9> <M-9>
"map  0xxx$xxx0
"  map  0xx0    THIS WORKS, but NEW USE for ctrl-B
map  0i// smup 0

"
" q out of vi. Stops if a change has not been written out.  
"map ` :q
" backtick not used much any more, so make it resize the window (mac forces 24x80 at startup)
"map ` :set lines=80  columns=150
"map 1 :set lines=100 columns=150
"map ` :set lines=70  columns=120
"map 1 :set lines=81  columns=120

" put a marker <.> on the line below current line // 
"hp map _ oa<.> 
"map _ o,<.>
map _ oi<.>
" searches for next line containing <.> 
map - /<[.]>/
" calls up rk's C code thing 
"hp map  :.!/users/rk/c/rkcfns
"map #5 :.w!rkcfns.in:r !\usr\rk\bin\rkcfns.exe
"
" calls up rk's bracket checker 
"hp map  :'d,.!rkbrakcnt
"map #6 :'d,.w!rkbrakcn.in:r !\usr\rk\bin\rkbrakcn.exe <rkbrakcn.in
" ( and ) set tabstops to 4 and 8 
"map ( :set ts=2
"map ) :set ts=4
"  make n/N do a ctrl-G 
"hp map n n
"hp map  N N
"map n /
"map  N ?
map n /
map  N ?
" msdos colours (on 32bit like 95 add 0000)
"set attrib=0x5b000000
" on 95, reverse 
"set attrib=0x70000000
"map #10 :set attrib=0x
"map #11 :set attrib=0x1e000000
"map #12 :set attrib=0x3f000000
"map #13 :set attrib=0x8f000000
"map #14 :set attrib=0x4f000000
"map #15 :set attrib=0x5b000000
"map #16 :set attrib=0x6f000000
"map #17 :set attrib=0x9f000000
"map #18 :set attrib=0x4f000000
"map #19 :set attrib=0x71000000
"map #20 :set attrib=0xcf000000
"
" exchange 2 words (w) 
"map X dwElpB
"
" progress/c commenter/uncommenter
"map ^_  :'d,.!comsh^[
"map   :'d,.!/cygdrive/c/cygwin/home/Inspiron6000user/sh/compc
"map   :'d,.!/Users/rk/sh/compc

" //    style comments below
map   :'d,.!$HOME/sh/compc
" /* */ style comments below
map   :'d,.!$HOME/sh/compcold 
" HTML style comments below   <!--   --    -->
map   :'d,.!$HOME/sh/compchtml 

map #5 :'d,.!$HOME/sh/comsmup


"
" single line commenter/uncommenter  (/* ... */)
"map  :'d,.!$HOME/sh/comline
"
" puts/removes (+num/-num) spaces from front of line (shell script)
"map  :'d,.!/rk/prespace 
"map  :'d,.!/cygdrive/c/cygwin/home/Inspiron6000user/sh/prespace 
"map  :'d,.!/Users/rk/sh/prespace  " works also
map  :'d,.!$HOME/sh/prespace 
"
"
map #6 :undo
map #5 :redo

" below line worked
"hi Comment guifg=#AAFF99
"hi String guifg=#ff5943

" new
hi Normal guifg=#ffffff
hi Comment guifg=#AAFF99
" hi String guifg=#ff5943
" hi String guifg=lightred
" hi String guifg=#fd6420
" hi String guifg=#fd7430
hi String guifg=#fd7430
" hi String guifg=orange

"hi Number guifg=LightBlue1
"hi Number guifg=#e0f0ff  too white
"hi Number guifg=#d0e0ff
"hi Number guifg=#c0e0ff
"hi Number guifg=#b8d8ff
"hi Number guifg=#a8c8ff
hi Number guifg=LightBlue1
hi Number guifg=#a8e8ff
"hi javaScriptValue guifg=cyan3
"hi javaScriptValue guifg=#c0e0ff
hi javaScriptValue guifg=LightBlue1
hi javaScriptValue guifg=#a8e8ff


"hi Identifier guifg=yellow
""hi Keyword guifg=blue
"hi Statement guifg=yellow

" identifier CSS class definition, rgb( )  JS function, var, { } [ ]  HTML < > </ = 
"hi Identifier guifg=yellow  gui=bold
hi Identifier guifg=cyan  gui=bold
"statement like HTML div, span, li, body  JS if, for, return, 'a
hi Statement guifg=cyan  gui=bold
"keyword like  JS window, document, null
hi Keyword guifg=orange  gui=bold


" or Type  or Prop
" hi Special guifg=lightsteelblue
" hi Special guifg=aliceblue
" hi Special guifg=CornflowerBlue
" hi Special guifg=LightSteelBlue1
hi Special guifg=LightSkyBlue1
hi Special guifg=white
hi Special guibg=#013303 guifg=#fafff8
hi Special guibg=#030c14 guifg=#fafff8
hi Special guibg=#030818 guifg=#f4faff
hi Special guibg=#0f030f guifg=#fefdfe

" hi Special guifg=khaki2
" hi Special guifg=burlywood1
" hi Special guifg=LavenderBlush2
" hi Special guifg=honeydew2
" hi Special guifg=azure3

"hi Type guifg=lightgoldenrod3  " too dark
"hi Type guifg=lightgoldenrod2  " too light
hi Type guifg=#dccd7f

"visual is selection colors
"hi Visual		term=reverse		ctermfg=yellow	ctermbg=darkCyan	guifg=black		guibg=white
hi Visual	guifg=black		guibg=orange    ctermfg=black	ctermbg=darkCyan  term=reverse	

"hi LineNr  guifg=#eedda0 guibg=black
hi LineNr  guifg=#ddeea0 guibg=black


"hi Prop guibg=hotpink2


"map #10 :so $VIM/_gvimrc
"map #10 :so $VIM/_gvimrc
"map #10 8s$TMPDIR
"map  8s$TMPDIR
"
" for macvim need "<F10>" in map  and do press fn-F10 in macvim
"map <F10> :s/bin.sh/bin\/bash/     " ??
"map #3 x                             " ??
"map <F10> :g//s///g 
"map <F10> :%! tr '' '' 
"map <F10> :%! tr 's' '\n' 
" change every  ctl-^  dec 30,oct 036  1E RS    RECORD SEPARATOR to a NEWLINE
map <F10> :%! tr '\036' '\n' 

map <F9> :g/: *\/\//d 
map <F8> :g/: *\*/d
map <F7> :g/: *\/\*/d 


" end of ex.rc

" end of ex.rc

" 
" =====================================================
" =====  macvim syntax highlighting categories
" =====================================================
" 
" /////////////////
" // javascript
" /////////////////
"   HiLink javaScriptComment		Comment
"   HiLink javaScriptLineComment		Comment
"   HiLink javaScriptCommentTodo		Todo
"   HiLink javaScriptSpecial		Special
"   HiLink javaScriptStringS		String
"   HiLink javaScriptStringD		String
"   HiLink javaScriptCharacter		Character
"   HiLink javaScriptSpecialCharacter	javaScriptSpecial
"   HiLink javaScriptNumber		javaScriptValue
"   HiLink javaScriptConditional		Conditional
"   HiLink javaScriptRepeat		Repeat
"   HiLink javaScriptBranch		Conditional
"   HiLink javaScriptOperator		Operator
"   HiLink javaScriptType			Type
"   HiLink javaScriptStatement		Statement
"   HiLink javaScriptFunction		Function
"   HiLink javaScriptBraces		Function
"   HiLink javaScriptError		Error
"   HiLink javaScrParenError		javaScriptError
"   HiLink javaScriptNull			Keyword
"   HiLink javaScriptBoolean		Boolean
"   HiLink javaScriptRegexpString		String
" 
"   HiLink javaScriptIdentifier		Identifier
"   HiLink javaScriptLabel		Label
"   HiLink javaScriptException		Exception
"   HiLink javaScriptMessage		Keyword
"   HiLink javaScriptGlobal		Keyword
"   HiLink javaScriptMember		Keyword
"   HiLink javaScriptDeprecated		Exception 
"   HiLink javaScriptReserved		Keyword
"   HiLink javaScriptDebug		Debug
"   
" 
" /////////////////
" // HTML
" /////////////////
"   HiLink javaScriptConstant		Label
"   HtmlHiLink htmlTag                     Function
"   HtmlHiLink htmlEndTag                  Identifier
"   HtmlHiLink htmlArg                     Type
"   HtmlHiLink htmlTagName                 htmlStatement
"   HtmlHiLink htmlSpecialTagName          Exception
"   HtmlHiLink htmlValue                     String
"   HtmlHiLink htmlSpecialChar             Special
"   if !exists("html_no_rendering")
"     HtmlHiLink htmlH1                      Title
"     HtmlHiLink htmlH2                      htmlH1
"     HtmlHiLink htmlH3                      htmlH2
"     HtmlHiLink htmlH4                      htmlH3
"     HtmlHiLink htmlH5                      htmlH4
"     HtmlHiLink htmlH6                      htmlH5
"     HtmlHiLink htmlHead                    PreProc
"     HtmlHiLink htmlTitle                   Title
"     HtmlHiLink htmlBoldItalicUnderline     htmlBoldUnderlineItalic
"     HtmlHiLink htmlUnderlineBold           htmlBoldUnderline
"     HtmlHiLink htmlUnderlineItalicBold     htmlBoldUnderlineItalic
"     HtmlHiLink htmlUnderlineBoldItalic     htmlBoldUnderlineItalic
"     HtmlHiLink htmlItalicUnderline         htmlUnderlineItalic
"     HtmlHiLink htmlItalicBold              htmlBoldItalic
"     HtmlHiLink htmlItalicBoldUnderline     htmlBoldUnderlineItalic
"     HtmlHiLink htmlItalicUnderlineBold     htmlBoldUnderlineItalic
"     HtmlHiLink htmlLink                    Underlined
"     HtmlHiLink htmlLeadingSpace            None
"   endif
"   
"   HtmlHiLink htmlPreStmt            PreProc
"   HtmlHiLink htmlPreError           Error
"   HtmlHiLink htmlPreProc            PreProc
"   HtmlHiLink htmlPreAttr            String
"   HtmlHiLink htmlPreProcAttrName    PreProc
"   HtmlHiLink htmlPreProcAttrError   Error
"   HtmlHiLink htmlSpecial            Special
"   HtmlHiLink htmlSpecialChar        Special
"   HtmlHiLink htmlString             String
"   HtmlHiLink htmlStatement          Statement
"   HtmlHiLink htmlComment            Comment
"   HtmlHiLink htmlCommentPart        Comment
"   HtmlHiLink htmlValue              String
"   HtmlHiLink htmlCommentError       htmlError
"   HtmlHiLink htmlTagError           htmlError
"   HtmlHiLink htmlEvent              javaScript
"   HtmlHiLink htmlError              Error
"   
"   HtmlHiLink javaScript             Special
"   HtmlHiLink javaScriptExpression   javaScript
"   HtmlHiLink htmlCssStyleComment    Comment
"   HtmlHiLink htmlCssDefinition      Special
" 
" 
" /////////////////
" // HTML
" /////////////////
"   HiLink cssComment Comment
"   HiLink cssVendor Comment
"   HiLink cssHacks Comment
"   HiLink cssTagName Statement
"   HiLink cssDeprecated Error
"   HiLink cssSelectorOp Special
"   HiLink cssSelectorOp2 Special
"   HiLink cssAttrComma Special
" 
"   HiLink cssAnimationProp cssProp
"   HiLink cssBackgroundProp cssProp
"   HiLink cssBorderProp cssProp
"   HiLink cssBoxProp cssProp
"   HiLink cssColorProp cssProp
"   HiLink cssContentForPagedMediaProp cssProp
"   HiLink cssDimensionProp cssProp
"   HiLink cssFlexibleBoxProp cssProp
"   HiLink cssFontProp cssProp
"   HiLink cssGeneratedContentProp cssProp
"   HiLink cssGridProp cssProp
"   HiLink cssHyerlinkProp cssProp
"   HiLink cssLineboxProp cssProp
"   HiLink cssListProp cssProp
"   HiLink cssMarqueeProp cssProp
"   HiLink cssMultiColumnProp cssProp
"   HiLink cssPagedMediaProp cssProp
"   HiLink cssPositioningProp cssProp
"   HiLink cssPrintProp cssProp
"   HiLink cssRubyProp cssProp
"   HiLink cssSpeechProp cssProp
"   HiLink cssTableProp cssProp
"   HiLink cssTextProp cssProp
"   HiLink cssTransformProp cssProp
"   HiLink cssTransitionProp cssProp
"   HiLink cssUIProp cssProp
"   HiLink cssIEUIProp cssProp
"   HiLink cssAuralProp cssProp
"   HiLink cssRenderProp cssProp
"   HiLink cssMobileTextProp cssProp
" 
"   HiLink cssAnimationAttr cssAttr
"   HiLink cssBackgroundAttr cssAttr
"   HiLink cssBorderAttr cssAttr
"   HiLink cssBoxAttr cssAttr
"   HiLink cssContentForPagedMediaAttr cssAttr
"   HiLink cssDimensionAttr cssAttr
"   HiLink cssFlexibleBoxAttr cssAttr
"   HiLink cssFontAttr cssAttr
"   HiLink cssGeneratedContentAttr cssAttr
"   HiLink cssGridAttr cssAttr
"   HiLink cssHyerlinkAttr cssAttr
"   HiLink cssLineboxAttr cssAttr
"   HiLink cssListAttr cssAttr
"   HiLink cssMarginAttr cssAttr
"   HiLink cssMarqueeAttr cssAttr
"   HiLink cssMultiColumnAttr cssAttr
"   HiLink cssPaddingAttr cssAttr
"   HiLink cssPagedMediaAttr cssAttr
"   HiLink cssPositioningAttr cssAttr
"   HiLink cssGradientAttr cssAttr
"   HiLink cssPrintAttr cssAttr
"   HiLink cssRubyAttr cssAttr
"   HiLink cssSpeechAttr cssAttr
"   HiLink cssTableAttr cssAttr
"   HiLink cssTextAttr cssAttr
"   HiLink cssTransformAttr cssAttr
"   HiLink cssTransitionAttr cssAttr
"   HiLink cssUIAttr cssAttr
"   HiLink cssIEUIAttr cssAttr
"   HiLink cssAuralAttr cssAttr
"   HiLink cssRenderAttr cssAttr
"   HiLink cssCommonAttr cssAttr
" 
"   HiLink cssPseudoClassId PreProc
"   HiLink cssPseudoClassLang Constant
"   HiLink cssValueLength Number
"   HiLink cssValueInteger Number
"   HiLink cssValueNumber Number
"   HiLink cssValueAngle Number
"   HiLink cssValueTime Number
"   HiLink cssValueFrequency Number
"   HiLink cssFunction Constant
"   HiLink cssURL String
"   HiLink cssFunctionName Function
"   HiLink cssFunctionComma Function
"   HiLink cssColor Constant
"   HiLink cssIdentifier Function
"   HiLink cssInclude Include
"   HiLink cssIncludeKeyword atKeyword
"   HiLink cssImportant Special
"   HiLink cssBraces Function
"   HiLink cssBraceError Error
"   HiLink cssError Error
"   HiLink cssUnicodeEscape Special
"   HiLink cssStringQQ String
"   HiLink cssStringQ String
"   HiLink cssAttributeSelector String
"   HiLink cssMedia atKeyword
"   HiLink cssMediaType Special
"   HiLink cssMediaComma Normal
"   HiLink cssMediaKeyword Statement
"   HiLink cssMediaProp cssProp
"   HiLink cssMediaAttr cssAttr
"   HiLink cssPage atKeyword
"   HiLink cssPagePseudo PreProc
"   HiLink cssPageMargin atKeyword
"   HiLink cssPageProp cssProp
"   HiLink cssKeyFrame atKeyword
"   HiLink cssKeyFrameSelector Constant
"   HiLink cssFontDescriptor Special
"   HiLink cssFontDescriptorFunction Constant
"   HiLink cssFontDescriptorProp cssProp
"   HiLink cssFontDescriptorAttr cssAttr
"   HiLink cssUnicodeRange Constant
"   HiLink cssClassName Function
"   HiLink cssClassNameDot Function
"   HiLink cssProp StorageClass
"   HiLink cssAttr Constant
"   HiLink cssUnitDecorators Number
"   HiLink cssNoise Noise
"   HiLink atKeyword Comment
"   delcommand HiLink
" endif
" 
" =====================================================
" =====  END OF  macvim syntax highlighting categories
" =====================================================
